import streamlit as st
import pandas as pd
import plotly.express as px

# ==========================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ==========================
st.set_page_config(
    page_title="Incidentes viales Medell√≠n",
    layout="wide",
    page_icon="üö¶"
)

st.title("üö¶ An√°lisis de v√≠ctimas en incidentes viales - Medell√≠n")

# ==========================
# CARGA Y LIMPIEZA DE DATOS
# ==========================
@st.cache_data
def cargar_datos(ruta):
    """Carga el CSV en fragmentos y los combina en un solo DataFrame."""
    chunk_size = 10000
    chunks = pd.read_csv(ruta, encoding="utf-8", chunksize=chunk_size)
    df = pd.concat(chunks)

    # Conversi√≥n de tipos de datos
    df["Fecha_incidente"] = pd.to_datetime(df["Fecha_incidente"], errors="coerce")
    df["Edad"] = pd.to_numeric(df["Edad"], errors="coerce")

    # Eliminar filas sin fecha
    df = df.dropna(subset=["Fecha_incidente"])

    return df

# --- Cargar los datos ---
df = cargar_datos("data/Mede_Victimas_inci.csv")
st.success(f"‚úÖ Datos cargados correctamente. Total de filas: {len(df):,}")

# Avisar si hay edades no v√°lidas
edad_nulas = df["Edad"].isna().sum()
if edad_nulas > 0:
    st.warning(f"‚ö†Ô∏è Se encontraron {edad_nulas:,} valores de 'Edad' no v√°lidos (convertidos a NaN).")

# ==========================
# FILTROS EN SIDEBAR
# ==========================
st.sidebar.header("Filtros de an√°lisis")

a√±os_disponibles = sorted(df["Fecha_incidente"].dt.year.dropna().unique())
a√±o = st.sidebar.selectbox("A√±o del incidente", a√±os_disponibles)

sexo = st.sidebar.multiselect(
    "Sexo",
    options=sorted(df["Sexo"].dropna().unique()),
    default=sorted(df["Sexo"].dropna().unique())
)

gravedad = st.sidebar.multiselect(
    "Gravedad v√≠ctima",
    options=sorted(df["Gravedad_victima"].dropna().unique()),
    default=sorted(df["Gravedad_victima"].dropna().unique())
)

# ==========================
# FILTRAR DATOS
# ==========================
df_filtrado = df[
    (df["Fecha_incidente"].dt.year == a√±o)
    & (df["Sexo"].isin(sexo))
    & (df["Gravedad_victima"].isin(gravedad))
]

# ==========================
# ESTAD√çSTICAS GENERALES
# ==========================
st.subheader(f"üìÖ Estad√≠sticas para el a√±o {a√±o}")

col1, col2 = st.columns(2)
col1.metric("Total de v√≠ctimas", f"{len(df_filtrado):,}")

edad_promedio = (
    round(df_filtrado["Edad"].mean(), 1)
    if df_filtrado["Edad"].notna().sum() > 0 else "N/D"
)
col2.metric("Edad promedio", edad_promedio)



st.subheader("üìä Indicadores clave")

col_a, col_b, col_c = st.columns(3)

col_a.metric("üö¶ Total incidentes", df_filtrado["Clase_incidente"].nunique())
col_b.metric("‚ö∞Ô∏è Muertes", (df_filtrado["Gravedad_victima"] == "Muertos").sum())
col_c.metric("üè• Heridos", (df_filtrado["Gravedad_victima"] == "Heridos").sum())


# ==========================
# GR√ÅFICOS PRINCIPALES
# ==========================
col1, col2 = st.columns(2)

# --- Distribuci√≥n por sexo y gravedad ---
with col1:
    fig1 = px.histogram(
        df_filtrado,
        x="Sexo",
        color="Gravedad_victima",
        barmode="group",
        title="Distribuci√≥n de v√≠ctimas por sexo y gravedad",
        labels={"Sexo": "Sexo", "count": "Cantidad de v√≠ctimas"}
    )
    st.plotly_chart(fig1, use_container_width=True)

# --- Tipos de incidentes ---
with col2:
    # Contar los tipos de incidentes
    tipos = (
        df_filtrado["Clase_incidente"]
        .value_counts()
        .reset_index()
    )

    # Renombrar columnas de forma segura
    tipos.columns = ["Tipo_incidente", "Cantidad"]

    # Crear el gr√°fico
    fig2 = px.bar(
        tipos,
        x="Tipo_incidente",
        y="Cantidad",
        title="Tipos de incidentes m√°s comunes",
        labels={"Tipo_incidente": "Tipo de incidente", "Cantidad": "N√∫mero de v√≠ctimas"}
    )
    st.plotly_chart(fig2, use_container_width=True)


# ==========================
# DISTRIBUCI√ìN DE EDADES
# ==========================
st.subheader("üë∂ Distribuci√≥n de edades de las v√≠ctimas")
fig3 = px.histogram(
    df_filtrado,
    x="Edad",
    nbins=20,
    color="Gravedad_victima",
    title="Distribuci√≥n de edades por gravedad de la v√≠ctima",
    labels={"Edad": "Edad (a√±os)", "count": "N√∫mero de v√≠ctimas"}
)
st.plotly_chart(fig3, use_container_width=True)

# ==========================
# DISTRIBUCI√ìN POR HORA
# ==========================

# --- Distribuci√≥n por hora del d√≠a ---
st.subheader("üïí Distribuci√≥n de incidentes por hora del d√≠a")

# Convertir la hora a formato datetime y extraer solo la hora (0‚Äì23)
df_filtrado["Hora_incidente"] = pd.to_datetime(df_filtrado["Hora_incidente"], format="%H:%M:%S", errors="coerce").dt.hour

# Agrupar por hora
horas = df_filtrado.groupby("Hora_incidente").size().reset_index(name="Cantidad")

# Eliminar valores nulos o fuera de rango
horas = horas.dropna()
horas = horas[horas["Hora_incidente"].between(0, 23)]

# Gr√°fico
fig5 = px.line(
    horas,
    x="Hora_incidente",
    y="Cantidad",
    markers=True,
    title="Cantidad de v√≠ctimas seg√∫n la hora del d√≠a",
    labels={"Hora_incidente": "Hora del incidente", "Cantidad": "N√∫mero de v√≠ctimas"}
)
st.plotly_chart(fig5, use_container_width=True)



# --- MAPA DE INCIDENTES EN MEDELL√çN ---
st.subheader("üó∫Ô∏è Mapa de incidentes en Medell√≠n")

# Limpiar coordenadas
df_filtrado["Latitud"] = (
    df_filtrado["Latitud"]
    .astype(str)
    .str.replace(",", ".", regex=False)
    .str.replace("Sin Inf", "", regex=False)
)
df_filtrado["Longitud"] = (
    df_filtrado["Longitud"]
    .astype(str)
    .str.replace(",", ".", regex=False)
    .str.replace("Sin Inf", "", regex=False)
)

# Convertir a n√∫meros y eliminar nulos
df_filtrado["Latitud"] = pd.to_numeric(df_filtrado["Latitud"], errors="coerce")
df_filtrado["Longitud"] = pd.to_numeric(df_filtrado["Longitud"], errors="coerce")
df_mapa = df_filtrado.dropna(subset=["Latitud", "Longitud"])

# Verificar que haya datos v√°lidos
if df_mapa.empty:
    st.warning("‚ö†Ô∏è No hay datos v√°lidos de ubicaci√≥n para mostrar en el mapa.")
else:
    fig_mapa = px.scatter_mapbox(
        df_mapa,
        lat="Latitud",
        lon="Longitud",
        hover_name="Clase_incidente",
        hover_data=["Barrio", "Fecha_incidente", "Gravedad_victima"],
        color="Clase_incidente",
        zoom=11,
        height=550
    )
    fig_mapa.update_layout(mapbox_style="carto-positron")
    fig_mapa.update_layout(margin={"r": 0, "t": 40, "l": 0, "b": 0})
    st.plotly_chart(fig_mapa, use_container_width=True)




    st.subheader("üìà Evoluci√≥n mensual de v√≠ctimas")

df_filtrado["Mes"] = df_filtrado["Fecha_incidente"].dt.month
mensual = df_filtrado.groupby("Mes").size().reset_index(name="Cantidad")

fig_mes = px.line(
    mensual,
    x="Mes",
    y="Cantidad",
    markers=True,
    title="Evoluci√≥n mensual de v√≠ctimas durante el a√±o",
    labels={"Mes": "Mes", "Cantidad": "N√∫mero de v√≠ctimas"}
)
st.plotly_chart(fig_mes, use_container_width=True)




st.subheader("üìÖ Distribuci√≥n por d√≠a de la semana")

df_filtrado["D√≠a_semana"] = df_filtrado["Fecha_incidente"].dt.day_name()

dias = df_filtrado["D√≠a_semana"].value_counts().reindex([
    "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
]).reset_index()
dias.columns = ["D√≠a_semana", "Cantidad"]

fig7 = px.bar(
    dias,
    x="D√≠a_semana",
    y="Cantidad",
    title="Cantidad de v√≠ctimas por d√≠a de la semana",
    labels={"D√≠a_semana": "D√≠a", "Cantidad": "N√∫mero de v√≠ctimas"}
)
st.plotly_chart(fig7, use_container_width=True)


# ==========================
# üß† CONCLUSIONES AUTOM√ÅTICAS
# ==========================
st.subheader("üß† Conclusiones autom√°ticas")

try:
    if df_filtrado.empty:
        st.warning("‚ö†Ô∏è No hay datos disponibles con los filtros seleccionados.")
    else:
        incidente_comun = df_filtrado["Clase_incidente"].value_counts().idxmax()
        sexo_predominante = df_filtrado["Sexo"].value_counts().idxmax()
        grupo_edad = (
            df_filtrado["Grupo_edad"].value_counts().idxmax()
            if "Grupo_edad" in df_filtrado.columns and not df_filtrado["Grupo_edad"].dropna().empty
            else "Sin datos"
        )
        comuna_frecuente = (
            df_filtrado["Comuna"].value_counts().idxmax()
            if "Comuna" in df_filtrado.columns and not df_filtrado["Comuna"].dropna().empty
            else "Sin datos"
        )

        st.markdown(f"""
        üìä En el a√±o **{a√±o}**, el tipo de incidente m√°s com√∫n fue **{incidente_comun}**.  
        üöª El sexo m√°s afectado fue **{sexo_predominante}**.  
        üë∂ El grupo de edad con m√°s v√≠ctimas fue **{grupo_edad}**.  
        üìç La comuna con m√°s incidentes fue **{comuna_frecuente}**.  
        """)
except Exception as e:
    st.error(f"No se pudieron generar conclusiones: {e}")
